#!/usr/bin/env python

import unittest
import re
import sys

PRE = ['Bug Fix', 'Enhancement', 'Feature']
OTHER = ['Doc', 'Version', 'Dependency', 'Debugging', 'Refactor', 'Test', 'Style', 'Peripheral', 'Merge', 'Revert']
ALL = PRE + OTHER
OK = [r'^\[(?:https?://)?imtapps\.atlassian\.net/([^/]+)/?.+/?\]']


def is_valid(m):
    return not is_invalid(m)


def is_invalid(m):
    invalid_for_support = any(m.startswith(x) for x in PRE) and not any(re.search(x, m, re.MULTILINE) for x in OK)
    completely_invalid = not any(m.startswith(x) for x in ALL)
    return bool(invalid_for_support or completely_invalid)


class Tests(unittest.TestCase):

    def test_empty(self):
        self.assertFalse(is_valid(""))

    def test_valid_test_commit(self):
        self.assertTrue(is_valid("Test: this is my test"))

    def test_valid_doc_commit(self):
        self.assertTrue(is_valid("Doc: this is my test"))

    def test_not_valid_bug_fix_commit(self):
        self.assertFalse(is_valid("Bug Fix: this is my test"))

    def test_invalid_prefix(self):
        self.assertFalse(is_valid("My Commit: this is my test"))

    def test_valid_bug_fix_commit(self):
        self.assertTrue(is_valid("Bug Fix: this is my test\n[https://imtapps.atlassian.net/browse/DSMO-828]"))

    def test_not_valid_feature_commit(self):
        self.assertFalse(is_valid("feature: this is my test\n[https://imtapps.atlassian.net/browse/DSMO-828]"))

    def test_valid_feature_commit(self):
        self.assertTrue(is_valid("Feature: this is my test\n[https://imtapps.atlassian.net/browse/DSMO-828]"))

    def test_not_valid_enhancement_commit(self):
        self.assertFalse(is_valid("Enchantment: this is my test\n[https://imtapps.atlassian.net/browse/DSMO-828]"))

    def test_valid_enhancement_commit(self):
        self.assertTrue(is_valid("Enhancement: this is my test\n[https://imtapps.atlassian.net/browse/DSMO-828]"))


if __name__ == '__main__':
    """
    To test:
    python commit-msg test

    To Install:
    put this script in a file called  ~/.git-templates/hooks/commit-msg
    run this command `git config --global init.templatedir '~/.git-templates'`
    you will need to run `git init` on any existing repos
    any new git repos created or cloned will get this hook automatically
    """
    if sys.argv[1] == 'test':
        del sys.argv[1:]
        unittest.main()
    else:
        with open(sys.argv[1]) as f:
            commit = f.read()
            if is_invalid(commit):
                message = "Commit message:\n {}\n".format(commit)
                message += "is invalid see https://github.com/imtapps/dev-docs/blob/master/commits.md\n"
                message += "valid prefixes are: " + ', '.join(ALL)
                print(message)
                sys.exit(1)
